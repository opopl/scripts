#!/usr/bin/env bash

# sbvars() dhelp() {{{

sbvars(){
# {{{
s_purpose=" ... convert PDF papers to DJVU format and copy to:"
s_project=" ~/scripts"

# name of this script 
export this_script=` basename $0 `
# directory where this script resides
export shd="`dirname $(readlink -f $0)`"
# shell functions file
export fsh="$hm/scripts/f.sh"
export cuneiform_v="0.9.0"

export papdir=$hm/doc/papers/ChemPhys/
export ocrdir=$hm/wrk/p/ocr/
export ocrexe="ocrodjvu"

vim_opts="-n -p"
v="vim $vim_opts"
gitdirs=( "config" "scripts" "templates" "vrt" "install" "coms" "cit" )

# }}}
}

sbvars
source $fsh

dhelp(){
# {{{
# general beginning part {{{
cat << EOF
=============================================
SCRIPT NAME: $this_script 
PROJECT: $s_project
PURPOSE: 
	Perform OCR on a PDF paper in the directory: 
		$papdir	
	The OCR files and the final output are stored in:
		$ocrdir
USAGE: $this_script [ OPTIONS ] 

	OPTIONS:

	============
	General
	============

			display the help message

	vm		v(iew) m(yself), i.e., edit this script
	-g		gvim invocation
	
	============
EOF
# }}}
# actual interesting part {{{
cat << EOF


	-r RANGE
		-	specify range of pages in the PDF file,
			on which to perform OCR. RANGE can be e.g.:

			3-20 	- STARTPAGE-FINALPAGE
			3		- single page
			15-		- STARTPAGE- 
							i.e., specify a starting page 
							and then go through the document till end.
			-20		- -FINALPAGE  
							i.e., specify a final page 
							starting from the first page of the document,
							go until FINALPAGE.

	-s SPKEY - specify the paper name in short format. 
					E.g. $this_script -s tomh10

EOF
# }}}
# final general part {{{
cat << EOF
REMARKS:
AUTHOR: O. Poplavskyy
SCRIPT LOCATION:
	$0
=============================================
EOF
# }}}
# }}}
}

[ -z "$*" ] && ( dhelp; exit 0 )

#}}}

main(){

# intro messages {{{

e_delim 100 "="
eoos "Input (PDF) papers directory: $papdir" 
eoos "Output (ocr PDF) directory: $ocrdir" 

#}}}
# while-loop  {{{

while [ ! -z "$1" ]; do 
	case "$1" in
	  "") ;;
	  --ocrdir) export ocrdir=$2; mkdir -p $ocrdir; shift ;;
	  --ocrexe) export ocrexe=$2; shift ;;
	  --papdir) export papdir=$2; shift ;;
	  -r) # specify page range {{{
	  		if [ ! -z $2 ]; then 
	  			range=$2; shift 
			else 
			  eoor "Range does not exist!"
			  #exit 1
			fi
			# getting start, fin from $range {{{
			if [ ! -z $range ]; then 
				export start=` echo "$range" | sed -e 's_^\([0-9]*\)\-.*_\1_g'  `
				export fin=` echo "$range" | sed -e 's_^.*\-\([0-9]*\)$_\1_g'  `
				# checking start and fin {{{
				if [ ! -z $start ]; then  
					eoos "Starting page is: $start"
				  else
					export start=1
					eoos "Starting page was undefined. Setting it to $start"
				  fi
				if [ ! -z $fin ]; then  
				  	eoos "Final page is: $fin"
				  else
					eoos "Final page was undefined. Will set it to the document's last page number."
				fi
			  	#}}}
		  	fi
		  #}}}
			#exit 0
	  ;;
	#}}}
	  -s) # short paper key {{{
	  	eoos "-s: short paper key option"	
	  	export pkey=`lpk $2 ` ; 
		 	eoos "Short paper key provided: $2"  
		if [ ! -z $pkey ]; then 
		 	eoos "Long paper key is: $pkey"  
	  		shift 
		  else
		 	eoor "Couldn't convert to the long form: $2"  
			exit 1
		fi
			;;
		# }}}
	  *) pkey=$1  
		 	eoos "Long paper key is: $pkey"  
			;;
	esac    
	shift
done

#}}}
# dealing with files {{{

mkdir -p $ocrdir

if [ -z $1 ]; then 
if [ ! -z $pkey ]; then  
	files=( ` find $papdir -name $pkey\*.pdf ` )
		  for p in ${files[@]}; do
				pbare=$( basename $p )
				pbare=${pbare%.pdf}
				eoos "Bare PDF filename: $pbare "
				num_pages=` npdf $papdir/$pbare`
				# page range {{{
				eoos "Number of pages in the PDF file: "
				eoos "	$num_pages"
				eoos "Extracting the necessary pages from the PDF file..."
				eoos "Pages are:"
				# deal with start and fin {{{
				if [ ! -z $start ]; then 
				  		eoos "Starting page: $start"
				  		if [ -z $fin ]; then 
						  	eoos "Final page was not specified before;"
							eoos "	Now setting it to the last page number: $num_pages"
							export fin=$num_pages
						else
						  	eoos "Final page: $fin"
						fi
				else
				  		export start=1
				  		eoos "Starting page: $start"
						if [ ! -z $fin ]; then
						  		eoos "Final page: $fin"
						  	else
							  	export fin="$num_pages"
						  		eoos "Final page: $fin"
						fi
				fi
				if [ "$start" -eq "$fin" ]; then 
							export opts="$start"
					  	else
							export opts="$start-$fin"
			  	fi
			  	#}}}
				# new "bare" name
				nbare=$pbare.$opts
				finpdf="$nbare.pdf"
				eoos "Running pdftk to extract the required pages..."
				pdftk $p cat $start-$fin output $ocrdir/$finpdf

			  	# }}}

					eoos "OCR engine: $ocrexe"
					ofile="$ocrdir/ocr.$finpdf"
				case $ocrexe in 
				  	"pdfocr") 
					#{{{
				# working directory for pdfocr {{{
				wocrdir="$ocrdir/w_$nbare"
				eoos "	Performing OCR on file: "
				eoos "		$p"
				eoos "Removing previous working directory..."
				rm -rf $wocrdir
				eoos "Creating working directory for ocr:"
				eoos "		$wocrdir"
				mkdir -p $wocrdir
			    #}}}
				# 
				e_delim 50 "-"
				eoos "Removing previous OCR file..."
				rm -rf $ofile
				pdfocr -i $ocrdir/$finpdf -c -o $ofile -l eng -k -w $wocrdir 
				e_delim 50 "-"
				eoos "Bundling the hocr html file..."
				cat ` find $wocrdir/pdfocr -name \*.hocr ` > $ocrdir/$nbare.html 
				#hocrfiles=( `find $wocrdir/pdfocr -name \*.hocr ` )
				;;
				
			  #}}}
					"ocrodjvu") 
					#{{{
						odjvu=$ocrdir/${finpdf%.pdf}.djvu
						eoos " PDF-to-DJVU conversion on: "
						eoos "  $finpdf"
						eoos "	 Output DJVU file is: "
						eoos "		$odjvu"
						pdf2djvu -o $odjvu --pages=$start-$fin $ocrdir/$finpdf	
						eoos "Now performing OCR recognition on the djvu file: "	
						eoos "	$odjvu"
						ocr_djvu="$ocrdir/ocr.`basename $odjvu`"
						ocrodjvu $odjvu -o $ocr_djvu	
						ocr_txt="p.$nbare.djvu.tex"
						eoos "OCR text will be saved in:"
						eoos "	$ocr_txt"
						eoos "DJVU OCR file is:"
						eoos "$ocr_djvu"
						#djvused $ocr_djvu -e 'print-pure-txt' >& $ocr_txt
						;;
					  #}}}
				 esac
		  done
fi
fi
exit 0
#}}}

}

# main part 
# {{{

script_opts=( $* )

# read cmd args => main()  {{{
while [ ! -z "$1" ]; do
  	case "$1" in
		  #{{{
	  	vm) $v $0 $fsh; exit ;;
		rm) rm -rf $ocrdir/* ;;
		ls) find $ocrdir -name \* ;;
		h) dhelp $*; exit ;;
		-g) v="$v -g" ;;
	  	*) main $* && exit 0 ;;
	esac
  	shift
        #}}}
done

# }}}
