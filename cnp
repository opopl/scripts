#!/usr/bin/env bash

# sbvars() dhelp() {{{

sbvars(){
# {{{
s_purpose=" ... convert PDF papers to DJVU format and copy to:"
s_project=" ~/scripts"

# name of this script 
export this_script=` basename $0 `
# directory where this script resides
export shd="`dirname $(readlink -f $0)`"
# shell functions file
export fsh="$hm/scripts/f.sh"

export papdir=$hm/doc/papers/ChemPhys/
export ddir="$hm/wrk/p/djvu"
export ddir="$hm/doc/papers/djvu"

vim_opts="-n -p"
v="vim $vim_opts"
gitdirs=( "config" "scripts" "templates" "vrt" "install" "coms" "cit" )

# }}}
}

sbvars
source $fsh

dhelp(){
# {{{
# general beginning part {{{
cat << EOF
=============================================
SCRIPT NAME: $this_script 
PROJECT: $s_project
PURPOSE: 
	Convert a PDF paper in directory: 
		$papdir	
	to DJVU format and copy the final DJVU file to:
		$ddir
USAGE: $this_script [ OPTIONS ] 

	OPTIONS:

	============
	General
	============

			display the help message

	vm		v(iew) m(yself), i.e., edit this script
	-g		gvim invocation
	
	============
EOF
# }}}
# actual interesting part {{{
cat << EOF

	FILE	- filename for the paper in the PDF format. e.g.
		$this_script FILE takes FILE.pdf as input and then
		produces FILE.djvu as output

EOF
# }}}
# final general part {{{
cat << EOF
REMARKS:
AUTHOR: O. Poplavskyy
SCRIPT LOCATION:
	$0
=============================================
EOF
# }}}
# }}}
}

[ -z "$*" ] && ( dhelp; exit 0 )

#}}}

main(){

# intro messages {{{


#}}}
# while-loop  {{{

while [ ! -z "$1" ]; do 
	case "$1" in
	  "") ;;
	  --ddir) export ddir=$2; shift ;;
	  --ddpap) export ddir="$hm/doc/papers/djvu"; shift ;;
	  --outfile) export outfile=$2; shift ;;
	  -r) # specify page range {{{
	  		if [ ! -z $2 ]; then 
	  			range=$2; shift 
			else 
			  eoor "Range does not exist!"
			  #exit 1
			fi
			# getting start, fin from $range {{{
			if [ ! -z $range ]; then 
				export start=` echo "$range" | sed -e 's_^\([0-9]*\)\-.*_\1_g'  `
				export fin=` echo "$range" | sed -e 's_^.*\-\([0-9]*\)$_\1_g'  `
				# checking start and fin {{{
				if [ ! -z $start ]; then  
					eoos "Starting page is: $start"
				  else
					export start=1
					eoos "Starting page was undefined. Setting it to $start"
				  fi
				if [ ! -z $fin ]; then  
				  	eoos "Final page is: $fin"
				  else
					eoos "Final page was undefined. Will set it to the document's last page number."
				fi
			  	#}}}
		  	fi
		  #}}}
			#exit 0
	  ;;
	#}}}
	  -s) # short paper key {{{
	  	eoos "-s: short paper key option"	
	  	export pkey=`lpk $2 ` ; 
		 	eoos "Short paper key provided: $2"  
		if [ ! -z $pkey ]; then 
		 	eoos "Long paper key is: $pkey"  
		  else
		 	eoor "Couldn't convert to the long form: $2"  
		  fi
	  shift ;;
		# }}}
	  *) pkey=$1  
		 	eoos "Long paper key is: $pkey"  
			;;
	esac    
	shift
done

#}}}
# dealing with files {{{

e_delim 100 "="
eoos "Input (PDF) papers directory: $papdir" 
eoos "Output (DJVU) directory: $ddir" 

if [ ! -z $pkey ]; then  
	files=( ` find $papdir -name $pkey\*.pdf ` )
		  for p in ${files[@]}; do
				eoos "	Converting file: "
				eoos "		$p"
				pbare=$( basename $p )
				pbare=${pbare%.pdf}
				# page range {{{
				num_pages=` npdf ${p%.pdf} `
				eoos "Number of pages in the PDF file: "
				eoos "	$num_pages"
				if [ -z $range ]; then
				  #{{{
				  	norange=1
					range="1-$num_pages"
					start=1
					fin="$num_pages"
				  #}}}
				else
				  #{{{
				eoos "Extracting the necessary pages from the PDF file..."
				eoos "Pages are:"
				# deal with start and fin {{{
				if [ ! -z $start ]; then 
				  		eoos "Starting page: $start"
				  		if [ -z $fin ]; then 
						  	eoos "Final page was not specified before;"
							eoos "	Now setting it to the last page number: $num_pages"
							export fin=$num_pages
						else
						  	eoos "Final page: $fin"
						fi
				else
				  		export start=1
				  		eoos "Starting page: $start"
						if [ ! -z $fin ]; then
						  		eoos "Final page: $fin"
						  	else
							  	export fin="$num_pages"
						  		eoos "Final page: $fin"
						fi
				fi
				if [ "$start" == "$fin" ]; then 
							export opts="$start"
					  	else
							export opts="$start-$fin"
			  	fi
				if [ "$start" == "1" ]; then 
				  if [ "$fin" == "$num_pages" ]; then 
					norange=1
				  fi
				fi
			  #}}}
			  	#}}}
			  	fi
				# new "bare" name
				if [ "$norange" == "1" ]; then
						nbare=$pbare
				  	else 
						nbare=$pbare.$opts
				fi
				finpdf="$nbare.pdf"
				if [ "$norange" == "1" ]; then
				  	cp $p $ddir
				else
					eoos "Running pdftk to extract the required pages..."
					pdftk $p cat $start-$fin output $ddir/$finpdf
			  	fi

			  	# }}}

				eoos "Running pdf2djvu on:"
				eoos "   $finpdf"
				eoos " ...in directory:"
				eoos "	$ddir"

				if [ -z $outfile ]; then 
					ofile="$ddir/${finpdf%.pdf}.djvu"
				  else 
					ofile="$ddir/$outfile"
				fi

				eoos "Output DJVU file is:"
				eoos "	$ofile"

				e_delim 50 "-"
				pdf2djvu -o $ofile  $ddir/$finpdf
				e_delim 50 "-"
		  done
fi
#}}}

}

# main part 
# {{{

script_opts=( $* )

# read cmd args => main()  {{{
while [ ! -z "$1" ]; do
  	case "$1" in
		  #{{{
	  	vm) $v $0 $fsh; exit ;;
		h) dhelp $*; exit ;;
		-g) v="$v -g" ;;
	  	*) main $* && exit 0 ;;
	esac
  	shift
        #}}}
done

# }}}
