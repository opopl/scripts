#!/usr/bin/perl -w
#
# Changelog:
#
# Original makemake utility - Written by Michael Wester <wester@math.unm.edu> December 27, 1995
# Cotopaxi (Consulting), Albuquerque, New Mexico
#
# 14:19:31 (Sat, 26-Mar-2011):
#
# mkdep - put under git control by op
#

use strict;
use Getopt::Std;
use File::Find;

#my %opt;
#@ARGV > 0 and getopts('n:s:m:', \%opt) and not (keys %opt > 1) or die 
#+<< "USAGE";
#Shows the biggest files residing in one or several directory trees.
#usage: $0 [-n num] [-t size] [-m size] directory [directory ...]
      #-n  show <num> files
      #-s  show biggest files totalling <size>
      #-m  show all files bigger than <size>
		#use only one option at a time
		 #default is 20 biggest files
#USAGE

use File::Find;

open(MAKEFILE, ">deps") or die $!; 
#
# Allow Fortran 90 module source files to have extensions other than .f90
#
@fexts = uniq(F,f,f90);
@f90 = uniq(F,f,f90);
foreach (@f90) { s/^/*./ };
# Dependency listings
#
&MakeDependsf90();
#&MakeDepends("*.f *.F", '^\s*include\s+["\']([^"\']+)["\']');
&MakeDepends("*.c",     '^\s*#\s*include\s+["\']([^"\']+)["\']');

#Subroutines  {{{

# &PrintWords(current output column, extra tab?, word list); --- print words nicely
sub PrintWords {
  # {{{
   local($columns) = 78 - shift(@_);
   local($extratab) = shift(@_);
   local($wordlength);
   #
   print MAKEFILE @_[0];
   $columns -= length(shift(@_));
   foreach $word (@_) {
      $wordlength = length($word);
      if ($wordlength + 1 < $columns) {
	 print MAKEFILE " $word";
	 $columns -= $wordlength + 1;
	 }
      else {
	 #
	 # Continue onto a new line
	 #
	 if ($extratab) {
	    print MAKEFILE " \\\n\t\t$word";
	    $columns = 62 - $wordlength;
	    }
	 else {
	    print MAKEFILE " \\\n\t$word";
	    $columns = 70 - $wordlength;
	    }
	 }
      }
# }}}
}

#Subs: LanguageCompiler toLower uniq {{{

# &LanguageCompiler(compiler, sources); --- determine the correct language
#    compiler
sub LanguageCompiler {
  # {{{
   local($compiler) = &toLower(shift(@_));
   local(@srcs) = @_;
   #
   if (length($compiler) > 0) {
      CASE: {
	 grep(/^$compiler$/, ("fc", "f77")) &&
	    do { $compiler = "FC"; last CASE; };
	 grep(/^$compiler$/, ("cc", "c"))   &&
	    do { $compiler = "CC"; last CASE; };
	 $compiler = "F90";
	 }
      }
   else {
      CASE: {
	 grep(/\.f90$/, @srcs)   && do { $compiler = "F90"; last CASE; };
	 grep(/\.(f|F)$/, @srcs) && do { $compiler = "FC";  last CASE; };
	 grep(/\.c$/, @srcs)     && do { $compiler = "CC";  last CASE; };
	 $compiler = "???";
	 }
      }
   $compiler;
 #}}}
}

# &toLower(string); --- convert string into lower case
sub toLower {
   local($string) = @_[0];
   $string =~ tr/A-Z/a-z/;
   $string;
}

#
# &uniq(sorted word list); --- remove adjacent duplicate words
#
sub uniq {
# {{{
   local(@words);
   foreach $word (@_) {
      if ($word ne $words[$#words]) {
	 push(@words, $word);
	 }
      }
   @words;
#}}}
}

#}}}

# &MakeDepends(language pattern, include file sed pattern); --- dependency
#    maker
#
sub MakeDepends {
# {{{
  my $subname = (caller(0))[3];
   local(@incs);
   local($lang) = @_[0];
   local($pattern) = @_[1];
   #
   foreach $file (<${lang}>) {
      open(FILE, $file) || warn "Cannot open $file: $!\n";
      print "Opened: $file \n";
      while (<FILE>) {
	 /$pattern/i && push(@incs, $1);
	 }
      if (defined @incs) {
	 $file =~ s/\.[^.]+$/.o/;
	 print MAKEFILE "$file: ";
	 &PrintWords(length($file) + 2, 0, @incs);
	 print MAKEFILE "\n";
	 undef @incs;
	 }
      }
# }}}
}

# &MakeDependsf90(f90 compiler); --- FORTRAN 90 dependency maker
sub MakeDependsf90 {
#{{{
  my $subname = (caller(0))[3];
   local(@dependencies);
   local(%filename);
   local(@incs);
   local(@modules);
   local($objfile);
   #
   # Associate each module with the name of the file that contains it {{{
   foreach $fext (@fexts) {
     foreach $dir (@dirs) {
     print "$fext $dir \n";
   foreach $file (<$dir/*.$fext>) {
      open(FILE, $file) || warn "Cannot open $file: $!\n";
      while (<FILE>) {
	 /^\s*module\s+([^\s!]+)/i &&
	    ($filename{&toLower($1)} = $file) =~ s/\.$fext$/.o/;
	 }
      }
    }
  }
   # }}}
   #
   # Print the dependencies of each file that has one or more include's or
   # references one or more modules
   # {{{
   foreach $file (<@f90>) {
      open(FILE, $file);
      while (<FILE>) {
	 /^\s*include\s+["\']([^"\']+)["\']/i && push(@incs, $1);
	 /^\s*use\s+([^\s,!]+)/i && push(@modules, &toLower($1));
	 }
      if (defined @incs || defined @modules) {
	 ($objfile = $file) =~ s/\.[^.]+$/.o/;
	 print MAKEFILE "$objfile: ";
	 undef @dependencies;
	 foreach $module (@modules) {
	    push(@dependencies, $filename{$module});
	    }
	 @dependencies = &uniq(sort(@dependencies));
	 &PrintWords(length($objfile) + 2, 0,
		     @dependencies, &uniq(sort(@incs)));
	 print MAKEFILE "\n";
	 undef @incs;
	 undef @modules;
	       }
      }
    #}}}
# }}}
}


# }}}
