#!/bin/bash

# intro {{{

this_script=` basename $0 `
export shd="`dirname $(readlink -f $0)`"
export hmo="$shd/../"
export confdir="$hmo/config/"
vrt=$hmo/vrt/

od=$hmo/
vim_opts="-n -p"
v="vim $vim_opts"
let i=0

# }}}

set_files(){
#{{{
for f in ${bf[@]}; do
	files[$i]=$od$f
	i=$(($i+1))
done
#}}}
}

if [ -z "$1" ]; then 
# help message {{{
cat << EOF
================================================
SCRIPT NAME: $this_script
USAGE: $this_script OPTS
PURPOSE: 
	configuration of different things; 
	running ./configure scripts
OPTS:

		display help message
	m, vm	view myself
	-g	fire gvim

	wgg	git for wg (in .git subdirectory)
			config description

	rg	ranger
	s	screen

	pn, pine	in home folder: 
				.pinerc .signature

	b	edit ~/.bashrc
	
	=================
	(un) installing
	=================

	igit		update .gitconfig with actual USER/HOSTNAME information
			
	i		cnf i:
				install basic configuration configuration 
				into the home folder:

					.bashrc .vimrc .

	ui			un-install ( opposite to the "i" option )

	=================
	vim plugins 
	=================

	lasu			Latex-Suite files 

	vcs 			VCSCommand - integration of vim and different version tracking
					software - git, svn etc.

	perls			perl-support

	=================
	vim stuff 
	=================

	v	edit ~/.vimrc

	for 	fortran & vim 


	sh	.bashrc .profile .bash_profile

	git	.gitconfig
	gi	git config -e
	
	h	./configure --prefix=\$HOME \$*
	hi	cnf h && make && make install

	tem	view templates in ~/templates directory

================================================
EOF
# }}}
else
  while [ ! -z "$1" ]; do
# {{{
		case $1 in
		  -g) v="$v -g";;
		  i) # install config files from ~/config directory to home dir {{{ 
				files=( gitconfig bashrc pinerc vimrc \
			       		screenrc addressbook cshrc \
				        config 	) 
				for file in ${files[@]}; do
				  	echo "Copying $file to $HOME..."
					echo "		from:"
					echo "			$shd"
					echo "		to:"
					echo "			$HOME"
					hfile=$HOME/.$file
					hofile=$HOME/.$file.old
					if [ -f $hfile ]; then
					        echo "Backup: $file"
						cp $hfile $hofile
					fi
					if [ -d $hfile ]; then
					        echo "Backup: $file"
						mv $hfile/* $hofile
					fi
					cfile=$confdir/$file
					if [ -f $cfile -o -d $cfile ]; then 
						ftype=`file $cfile | awk -F ':' '{ print $2 }' | sed 's/^[ ]*//g' `
						case $ftype in 
						  	"directory") mkdir -p $hfile ; cp -r $cfile/* $hfile/	;;
							*) cp -r $cfile $hfile ;;
						esac
					else
						echo "$cfile doesn't exist!"
					fi
					done
				exit
			;;
			# }}}
			igit) #update .gitconfig {{{
					eogit(){
						echo "$*" >> $HOME/.gitconfig
					}
					eogit "[user]" 
					eogit "name=$USER@$HOSTNAME" 
					eogit "email=$USER@$HOSTNAME"
				#}}}
			;;
		  	lasu) # Latex-Suite {{{
				od=$vrt/ftplugin/latex-suite/
				bf=( main.vim envmacros.vim elementmacros.vim bibtex.vim opmacros.vim \
			        	custommacros.vim texrc ../tex_latexSuite.vim \ 
					wizardfuncs.vim mathmacros.vim brackets.vim \
				        folding.vim 	)
					set_files 
				bf=( lasu.tex ) 
				od=( $HOME/doc/coms/ ) 
			;;
			# }}}
			"perls") # perl-support {{{
				od=$vrt/ftplugin/
				bf=perl.vim
				set_files
				od=$vrt/plugin/
				bf=perl-support.vim
				set_files
				od=$vrt/perl-support/doc/
				bf=perl-hot-keys.tex
			;;
			# }}}
        		"rg") od=$hm/.config/ranger/ ; bf=( "*.py" "scope.sh" ) ;;
			"b") bf=( bashrc ) ; od=~/config/ ;; 
			"ssh") bf=( authorized_keys id_rsa.pub ) ; od=~/.ssh/ ;; 
			"csh") bf=( cshrc ) ; od=~/config/ ;; 
			"v") bf=( vimrc ) ; od=~/config/ ;; 
			"s") bf=( screenrc ) ; od=~/config/ ;; 
			"gi") git config -e && exit ;;
			"git") bf=( gitconfig ) ; od=~/config/ ;; 
			"pn" | "pine") bf=( pinerc ) ; od=~/config/ ;; 
			"m" | "vm") bf=( $0 ) ; od="" ;;
			"h") shift ; ./configure --prefix=$HOME $* ; exit ;;
			hi) shift; $0 h $* && make && make install; exit ;;
			he) ./configure --help | less; exit ;;
			"for") 
			bf=( $vrt/ftplugin/fortran.vim \
				$vrt/syntax/fortran.vim \
				$vrt/plugin/SyntaxFolds.vim \
				$vrt/after/ftplugin/fortran.vim \
				$HOME/.vimrc ) od="" ;;
			wgg) 
				bf=( config description git-svn info/exclude ../.gitignore ) 
				od=$wgdir/../.git/ 
				;;
			sh) bf=( .bashrc .profile .bash_profile ) ;;
			vcs) od=$VIMRUNTIME/plugin/; cd $od;  bf=( ` ls vcs*.vim ` ); set_files
		       	     od=$HOME/doc/coms/; bf=( vcscommand.tex ) 
					;;
			tem) od=$hm/templates/; cd $od; bf=( ` ls *.sh | sed '/~$/d' ` )
		esac
		set_files
		shift
	done
	$v ${files[@]}
# }}}
fi
